@page "/books"
@using MyLibraryApp.Shared
@using MyLibraryApp.UI.Services
@inject IBookService BookService
@inject NavigationManager Navigation

<PageTitle>Books</PageTitle>

<h1>Books</h1>

<button class="btn btn-primary" @onclick="CreateNewBook">Create New Book</button>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Author</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (books != null)
    {
        foreach (var book in books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditBook(book.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="3">No books available</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Book> books;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await BookService.GetBooksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }

    private void CreateNewBook()
    {
        Navigation.NavigateTo("/books/create");
    }

    private void EditBook(Guid id)
    {
        Navigation.NavigateTo($"/books/edit/{id}");
    }

    private async Task DeleteBook(Guid id)
    {
        try
        {
            await BookService.DeleteBookAsync(id);
            books = await BookService.GetBooksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }
}