@page "/LoansList"
@using MyLibraryApp.Shared
@using MyLibraryApp.UIf.Services
@inject ILoanService LoanService

<h3>Loans</h3>
<div>
    <button type="button" class="btn btn-light">
        <i class="bi bi-inbox"></i> Kölcsönzés
    </button>
</div>
<div class="mb-3 loans-search">
    <input type="text" class="form-control search-input" @bind="_searchTerm" @oninput="CheckIfEmpty" placeholder="Keresés..." />
    <select @bind="_filterType" class="form-select search-select">
        <option value="Reader">Olvasószám alapján </option>
        <option value="Book">Leltáriszám alapján</option>
    </select>
    <button type="button" class="btn btn-light" @onclick="() => SearchInLoans(_searchTerm)">
        <i class="bi bi-search"></i> Keresés
    </button>
</div>


@if (_loans is not null)
{
    <table class="table table-hover">
        <thead>
        <tr>
            <td>Olvasószám</td>
            <td>Olvasó neve</td>
            <td>Könyv leltári száma</td>
            <td>Könyv</td>
            <td>Kölcsönzés dátuma</td>
            <td>Visszahozás dátuma</td>
        </tr>
        </thead>
        <tbody>
        @foreach (var loan in _loans)
        {
            <tr>
                <td>@loan.ReaderId</td> 
                <td>@loan.Reader</td>
                <td>@loan.BookId</td>
                <td>@loan.Book</td>
                <td>@loan.LoanDate</td>
                <td>@loan.ReturnDate</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private string _searchTerm = string.Empty;
    private List<LoanWithDetails> _loans;
    private string _filterType = "Reader";
    private List<LoanWithDetails> _allLoans;
    
    protected override async Task OnInitializedAsync()
    {
        _loans = await LoanService.GetAllAsync();
        _allLoans = _loans;
    }

    private void CheckIfEmpty()
    {
        _loans = _allLoans; 
        StateHasChanged();
        
    }
    
    private async Task SearchInLoans(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            return; // Ne csináljon semmit, ha üres a beviteli mező
        }
        
        Guid searchId = Guid.Parse(search);
        
        switch (_filterType)
        {
            case "Reader":
                await SearchByReaderId(searchId);
                break;
            case "Book":
                await SearchByBookId(searchId);
                break;
            default:
                Console.WriteLine("Érvénytelen keresési típus.");
                break;
        }
    }

    private async Task SearchByReaderId(Guid readerId)
    {
        _loans = await LoanService.GetByReaderAsync(readerId);
    }

    private async Task SearchByBookId(Guid bookId)
    {
        _loans = await LoanService.GetByBookAsync(bookId);
    }

}