@page "/ReadersList"
@using MyLibraryApp.Shared
@using MyLibraryApp.UIf.Services
@using MyLibraryApp.UIf.Components
@inject IReaderService ReaderService

<div>
    <h3>Readers</h3>
    <button type="button" class="btn btn-light" @onclick="() => OpenReaderForm()">
        <i class="bi bi-person-plus"></i> Új olvasó hozzáadása
    </button>
</div>

@if (_readers is not null)
{
    <table class="table table-hover">
        <thead>
        <tr>
            <td>Olvasószám</td>
            <td>Név</td>
            <td>Lakcím</td>
            <td>Születési idő</td>
            <td>Műveletek</td>
        </tr>
        </thead>
        <tbody>
        @foreach (var reader in _readers)
        {
            <tr>
                <td>@reader.Id</td>
                <td>@reader.Name</td>
                <td>@reader.Address</td>
                <td>@reader.BirthDate</td>
                <td>
                    <button type="button" class="btn btn-light" @onclick="() => OpenReaderForm(reader)" data-bs-toggle="tooltip" title="Szerkesztés">
                        <i class="bi bi-person-gear"></i>
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => OpenDeleteDialog(reader.Id)" data-bs-toggle="tooltip" title="Törlés">
                        <i class="bi bi-person-dash"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_showReaderForm)
{
    <ReaderForm Reader="_selectedReader" 
                OnSubmit="@(_selectedReader.Id == Guid.Empty ? AddReader : UpdateReader)" 
                DialogTitle="@(_selectedReader.Id == Guid.Empty ? "Új olvaso hozzáadása" : "OLvasó szerkesztése")"
                SubmitButtonText="@(_selectedReader.Id == Guid.Empty ? "Hozzáadás" : "Mentés")"
                OnClose="CloseReaderForm"/>
}

@if (_deleteReader)
{
    <DeleteForm EntityId="_selectedId"
                OnClose="CloseDeleteDialog"
                OnDelete="DeleteReader"></DeleteForm>
}

@code {
    private List<Reader> _readers;
    private Boolean _showReaderForm = false;
    private Reader? _selectedReader;
    private Boolean _deleteReader = false;
    private Guid _selectedId;
    
    protected override async Task OnInitializedAsync()
    {
        _readers = await ReaderService.GetAllAsync();
    }

    private void OpenReaderForm(Reader? reader = null)
    {
        _selectedReader = reader ?? new Reader() { Id = Guid.Empty, BirthDate = new DateOnly(1990,1,1)};
        _showReaderForm = true;
    }

    private async Task CloseReaderForm()
    {
        _selectedReader = null;
        _showReaderForm = false;
        _readers = await ReaderService.GetAllAsync();
    }
    
    private async Task UpdateReader(Reader reader)
    {
        try
        {
            await ReaderService.UpdateAsync(reader);
            await CloseReaderForm();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to update book: {e.Message}");
        }
    }

    private async Task AddReader(Reader reader)
    {
        try
        {
            await ReaderService.AddAsync(reader);
            await CloseReaderForm();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to add new reader: {e.Message}");
            throw;
        }
    }

    private void OpenDeleteDialog(Guid id)
    {
        _deleteReader = true;
        _selectedId = id;
    }

    private void CloseDeleteDialog()
    {
        _selectedId = Guid.Empty;
        _deleteReader = false;
    }

    private async Task DeleteReader(Guid id)
    {
        await ReaderService.DeleteAsync(id);
        _readers = await ReaderService.GetAllAsync();
        CloseDeleteDialog();
    }
}